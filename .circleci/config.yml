version: 2
jobs:
  test_frontend:
    docker:
      - image: circleci/node:8.11.2-stretch
    working_directory: ~/sudoku-race
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies{{ checksum "frontend/package-lock.json" }}
            - v1-dependencies-
      - run: cd frontend && npm install
      - save_cache:
          paths:
            - ~/sudoku-race/frontend/node_modules
          key: v1-dependencies-{{ checksum "frontend/package-lock.json" }}
      - run: cd frontend && CI=1 npm test

  deploy_frontend:
    docker:
      - image: circleci/node:8.11.2-stretch
    working_directory: ~/sudoku-race
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies{{ checksum "frontend/package-lock.json" }}
            - v1-dependencies-
      - run: cd frontend && npm install
      - save_cache:
          paths:
            - ~/sudoku-race/frontend/node_modules
          key: v1-dependencies-{{ checksum "frontend/package-lock.json" }}
      - run: cd frontend && npm run-script build
      - run:
          name: "Install aws cli"
          command: |
            sudo apt-get update -qq && sudo apt-get install -y python-dev
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Sync optimized build to S3, invalidate CloudFront"
          command: |
            aws s3 sync frontend/build s3://www.sudokurace.io
            aws cloudfront create-invalidation --distribution-id EGZ7RY9UXMOMT --paths "/*"

  test_backend:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/sudoku-race
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies{{ checksum "backend/build.gradle" }}
            - v1-dependencies-
      - run: cd backend && gradle wrapper
      - run: cd backend && ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "backend/build.gradle" }}
      - run: cd backend && ./gradlew build

      - store_artifacts:
          path: backend/service/build/reports

      - store_test_results:
          path: backend/service/build/test-results

  docker_build_backend:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Install aws cli"
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region us-west-2)
      - run:
          name: "Build & push Docker image"
          command: |
            docker build -t $AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/sudokurace:latest -t $AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/sudokurace:$CIRCLE_SHA1 -f backend/Dockerfile backend
            docker push $AWS_ACCOUNT_ID.dkr.ecr.us-west-2.amazonaws.com/sudokurace:$CIRCLE_SHA1

  terraform_apply:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/sudoku-race
    steps:
      - checkout
      - run:
          name: "Apply Terraform plan"
          command: |
            curl "https://releases.hashicorp.com/terraform/0.11.7/terraform_0.11.7_linux_amd64.zip" -o "terraform.zip"
            unzip terraform.zip
            ./terraform init -input=false
            ./terraform plan -out=tfplan.txt -input=false
            ./terraform apply -input=false -auto-approve tfplan.txt
      - store_artifacts:
          path: tfplan

workflows:
  version: 2
  build:
    jobs:
      - test_frontend
      - deploy_frontend:
          requires:
            - test_frontend
      - test_backend
      - docker_build_backend:
          requires:
            - test_backend
          filters:
            branches:
              only:
                - master
      - terraform_apply:
          requires:
            - test_frontend
            - test_backend
